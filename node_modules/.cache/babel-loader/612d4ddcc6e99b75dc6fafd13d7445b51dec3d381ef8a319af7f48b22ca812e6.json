{"ast":null,"code":"var _jsxFileName = \"/Users/nicholaslarkins/Documents/projects/lucy-demo/src/AudioDemo.js\",\n  _s = $RefreshSig$();\n// import React, { useRef } from 'react';\n// import './AudioDemo.css';\n\n// function AudioDemo() {\n//     const audioRef = useRef(null);\n//     const canvasRef = useRef(null);\n//     let audioContext, analyser, dataArray, bufferLength, source;\n\n//     const playAudio = () => {\n//         if (audioRef.current) {\n//             if (!audioContext) {\n//                 visualizeAudio();\n//             }\n//             audioRef.current.play();\n//         }\n//     };\n\n//     const visualizeAudio = () => {\n//         audioContext = new (window.AudioContext || window.webkitAudioContext)();\n//         analyser = audioContext.createAnalyser();\n//         if (!source) { // Check if source is already defined\n//             source = audioContext.createMediaElementSource(audioRef.current);\n//             source.connect(analyser);\n//             analyser.connect(audioContext.destination);\n//         }\n//         analyser.fftSize = 256;\n//         bufferLength = analyser.frequencyBinCount;\n//         dataArray = new Uint8Array(bufferLength);\n\n//         const canvas = canvasRef.current;\n//         const ctx = canvas.getContext(\"2d\");\n//         const WIDTH = canvas.width;\n//         const HEIGHT = canvas.height;\n\n//         function draw() {\n//             requestAnimationFrame(draw);\n//             analyser.getByteFrequencyData(dataArray);\n//             ctx.clearRect(0, 0, WIDTH, HEIGHT); // Clear the canvas for each frame\n//             const barWidth = WIDTH / bufferLength;\n//             let barHeight;\n//             let x = 0;\n\n//             for (let i = 0; i < bufferLength; i++) {\n//                 barHeight = (dataArray[i] / 255) * HEIGHT; // Adjusted scaling\n\n//                 ctx.fillStyle = 'white'; // Set bars to white\n//                 ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n//                 x += barWidth;\n//             }\n//         }\n\n//         draw();\n//     };\n\n//     return (\n//         <div className=\"audio-demo-container\">\n//             <img src=\"/qsic-logo.png\" alt=\"Qsic Logo\" className=\"qsic-logo\" />\n//             <div className=\"play-button\" onClick={playAudio}>\n//             </div>\n//             <canvas ref={canvasRef} className=\"audio-visualizer\"></canvas>\n//             <div className=\"cta\">\n//                 Interested in Lucy? <a href=\"/contact_link\" className=\"cta-link\">Contact us for a demo</a>\n//             </div>\n//             <audio ref={audioRef} src=\"/lucy-demo.wav\"></audio>\n//         </div>\n//     );\n// }\n\n// export default AudioDemo;\n\n// // src/AudioDemo.js\n\n// import React, { useRef, useEffect } from 'react';\n// import './AudioDemo.css';\n\n// function AudioDemo() {\n//     let source;\n//     const audioRef = useRef(null);\n//     const canvasRef = useRef(null);\n//     let audioContext, analyser, dataArray, bufferLength;\n\n//     const playAudio = () => {\n//         if (audioRef.current) {\n//             if (!audioContext) {\n//                 visualizeAudio();\n//             }\n//             audioRef.current.play();\n//         }\n//     };\n\n//     const visualizeAudio = () => {\n//         audioContext = new (window.AudioContext || window.webkitAudioContext)();\n//         analyser = audioContext.createAnalyser();\n//         const source = audioContext.createMediaElementSource(audioRef.current);\n//         source.connect(analyser);\n//         analyser.connect(audioContext.destination);\n//         analyser.fftSize = 256;\n//         bufferLength = analyser.frequencyBinCount;\n//         dataArray = new Uint8Array(bufferLength);\n\n// \tconst devicePixelRatio = window.devicePixelRatio || 1;\n// \tcanvas.width = WIDTH * devicePixelRatio;\n// \tcanvas.height = HEIGHT * devicePixelRatio;\n// \tctx.scale(devicePixelRatio, devicePixelRatio);\n\n//         const canvas = canvasRef.current;\n//         const ctx = canvas.getContext(\"2d\");\n//         const WIDTH = canvas.width;\n//         const HEIGHT = canvas.height;\n// \tfunction draw() {\n// \t    requestAnimationFrame(draw);\n// \t    analyser.getByteFrequencyData(dataArray);\n// \t    ctx.clearRect(0, 0, WIDTH, HEIGHT); // Clear the canvas for each frame\n// \t    const barWidth = WIDTH / bufferLength;\n// \t    let barHeight;\n// \t    let x = 0;\n\n// \t    for (let i = 0; i < bufferLength; i++) {\n// \t\tbarHeight = (dataArray[i] / 255) * HEIGHT; // Adjusted scaling\n\n// \t\t// Create a gradient color for the bars\n// \t\tconst gradient = ctx.createLinearGradient(0, HEIGHT, 0, HEIGHT - barHeight);\n// \t\tgradient.addColorStop(0, '#FFC0CB'); // Light Pink at the top\n// \t\tgradient.addColorStop(1, '#D8BFD8'); // Light Purple at the bottom\n\n// \t\tctx.fillStyle = gradient;\n// \t\tctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n// \t\tx += barWidth;\n// \t    }\n// \t}\n\n//         draw();\n//     };\n\n//     return (\n//         <div className=\"audio-demo-container\">\n//             <img src=\"/qsic-logo.png\" alt=\"Qsic Logo\" className=\"qsic-logo\" />\n//             <div className=\"play-button\" onClick={playAudio}>\n//             </div>\n//             <canvas ref={canvasRef} className=\"audio-visualizer\"></canvas>\n//             <div className=\"cta\">\n//                 Interested in Lucy? <a href=\"/contact_link\" className=\"cta-link\">Contact us for a demo</a>\n//             </div>\n//             <audio ref={audioRef} src=\"/lucy-demo.wav\"></audio>\n//         </div>\n//     );\n// }\n\n// export default AudioDemo;\nimport React, { useRef } from 'react';\nimport './AudioDemo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioDemo() {\n  _s();\n  const audioRef = useRef(null);\n  const canvasRef = useRef(null);\n  let audioContext, analyser, dataArray, bufferLength, source;\n  const playAudio = () => {\n    if (audioRef.current) {\n      if (!audioContext) {\n        visualizeAudio();\n      }\n      audioRef.current.play();\n    }\n  };\n  const visualizeAudio = () => {\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    analyser = audioContext.createAnalyser();\n    if (!source) {\n      // Check if source is already defined\n      source = audioContext.createMediaElementSource(audioRef.current);\n      source.connect(analyser);\n      analyser.connect(audioContext.destination);\n    }\n    analyser.fftSize = 256;\n    bufferLength = analyser.frequencyBinCount;\n    dataArray = new Uint8Array(bufferLength);\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const WIDTH = canvas.width;\n    const HEIGHT = canvas.height;\n\n    // Adjust canvas resolution for sharper visuals\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    canvas.width = WIDTH * devicePixelRatio;\n    canvas.height = HEIGHT * devicePixelRatio;\n    ctx.scale(devicePixelRatio, devicePixelRatio);\n    function draw() {\n      requestAnimationFrame(draw);\n      analyser.getByteFrequencyData(dataArray);\n      ctx.clearRect(0, 0, WIDTH, HEIGHT); // Clear the canvas for each frame\n      const barWidth = WIDTH / bufferLength;\n      let barHeight;\n      let x = 0;\n      ctx.lineCap = 'round'; // Make bars have rounded ends\n\n      for (let i = 0; i < bufferLength; i++) {\n        barHeight = dataArray[i] / 255 * HEIGHT; // Adjusted scaling\n\n        ctx.fillStyle = 'white'; // Set bars to white\n        ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n        x += barWidth;\n      }\n    }\n    draw();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-demo-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"/qsic-logo.png\",\n      alt: \"Qsic Logo\",\n      className: \"qsic-logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-button\",\n      onClick: playAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"audio-visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cta\",\n      children: [\"Interested in Lucy? \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/contact_link\",\n        className: \"cta-link\",\n        children: \"Contact us for a demo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: \"/lucy-demo.wav\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioDemo, \"0K7Ujp1aJM+7/FxRkj+rnC/WoRE=\");\n_c = AudioDemo;\nexport default AudioDemo;\nvar _c;\n$RefreshReg$(_c, \"AudioDemo\");","map":{"version":3,"names":["React","useRef","jsxDEV","_jsxDEV","AudioDemo","_s","audioRef","canvasRef","audioContext","analyser","dataArray","bufferLength","source","playAudio","current","visualizeAudio","play","window","AudioContext","webkitAudioContext","createAnalyser","createMediaElementSource","connect","destination","fftSize","frequencyBinCount","Uint8Array","canvas","ctx","getContext","WIDTH","width","HEIGHT","height","devicePixelRatio","scale","draw","requestAnimationFrame","getByteFrequencyData","clearRect","barWidth","barHeight","x","lineCap","i","fillStyle","fillRect","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","href","_c","$RefreshReg$"],"sources":["/Users/nicholaslarkins/Documents/projects/lucy-demo/src/AudioDemo.js"],"sourcesContent":["// import React, { useRef } from 'react';\n// import './AudioDemo.css';\n\n// function AudioDemo() {\n//     const audioRef = useRef(null);\n//     const canvasRef = useRef(null);\n//     let audioContext, analyser, dataArray, bufferLength, source;\n\n//     const playAudio = () => {\n//         if (audioRef.current) {\n//             if (!audioContext) {\n//                 visualizeAudio();\n//             }\n//             audioRef.current.play();\n//         }\n//     };\n\n//     const visualizeAudio = () => {\n//         audioContext = new (window.AudioContext || window.webkitAudioContext)();\n//         analyser = audioContext.createAnalyser();\n//         if (!source) { // Check if source is already defined\n//             source = audioContext.createMediaElementSource(audioRef.current);\n//             source.connect(analyser);\n//             analyser.connect(audioContext.destination);\n//         }\n//         analyser.fftSize = 256;\n//         bufferLength = analyser.frequencyBinCount;\n//         dataArray = new Uint8Array(bufferLength);\n\n//         const canvas = canvasRef.current;\n//         const ctx = canvas.getContext(\"2d\");\n//         const WIDTH = canvas.width;\n//         const HEIGHT = canvas.height;\n\n\n\n//         function draw() {\n//             requestAnimationFrame(draw);\n//             analyser.getByteFrequencyData(dataArray);\n//             ctx.clearRect(0, 0, WIDTH, HEIGHT); // Clear the canvas for each frame\n//             const barWidth = WIDTH / bufferLength;\n//             let barHeight;\n//             let x = 0;\n        \n//             for (let i = 0; i < bufferLength; i++) {\n//                 barHeight = (dataArray[i] / 255) * HEIGHT; // Adjusted scaling\n        \n//                 ctx.fillStyle = 'white'; // Set bars to white\n//                 ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n//                 x += barWidth;\n//             }\n//         }\n        \n\n//         draw();\n//     };\n\n//     return (\n//         <div className=\"audio-demo-container\">\n//             <img src=\"/qsic-logo.png\" alt=\"Qsic Logo\" className=\"qsic-logo\" />\n//             <div className=\"play-button\" onClick={playAudio}>\n//             </div>\n//             <canvas ref={canvasRef} className=\"audio-visualizer\"></canvas>\n//             <div className=\"cta\">\n//                 Interested in Lucy? <a href=\"/contact_link\" className=\"cta-link\">Contact us for a demo</a>\n//             </div>\n//             <audio ref={audioRef} src=\"/lucy-demo.wav\"></audio>\n//         </div>\n//     );\n// }\n\n// export default AudioDemo;\n\n\n\n\n\n// // src/AudioDemo.js\n\n// import React, { useRef, useEffect } from 'react';\n// import './AudioDemo.css';\n\n// function AudioDemo() {\n//     let source;\n//     const audioRef = useRef(null);\n//     const canvasRef = useRef(null);\n//     let audioContext, analyser, dataArray, bufferLength;\n\n//     const playAudio = () => {\n//         if (audioRef.current) {\n//             if (!audioContext) {\n//                 visualizeAudio();\n//             }\n//             audioRef.current.play();\n//         }\n//     };\n\n//     const visualizeAudio = () => {\n//         audioContext = new (window.AudioContext || window.webkitAudioContext)();\n//         analyser = audioContext.createAnalyser();\n//         const source = audioContext.createMediaElementSource(audioRef.current);\n//         source.connect(analyser);\n//         analyser.connect(audioContext.destination);\n//         analyser.fftSize = 256;\n//         bufferLength = analyser.frequencyBinCount;\n//         dataArray = new Uint8Array(bufferLength);\n        \n// \tconst devicePixelRatio = window.devicePixelRatio || 1;\n// \tcanvas.width = WIDTH * devicePixelRatio;\n// \tcanvas.height = HEIGHT * devicePixelRatio;\n// \tctx.scale(devicePixelRatio, devicePixelRatio);\n\n//         const canvas = canvasRef.current;\n//         const ctx = canvas.getContext(\"2d\");\n//         const WIDTH = canvas.width;\n//         const HEIGHT = canvas.height;\n// \tfunction draw() {\n// \t    requestAnimationFrame(draw);\n// \t    analyser.getByteFrequencyData(dataArray);\n// \t    ctx.clearRect(0, 0, WIDTH, HEIGHT); // Clear the canvas for each frame\n// \t    const barWidth = WIDTH / bufferLength;\n// \t    let barHeight;\n// \t    let x = 0;\n\n// \t    for (let i = 0; i < bufferLength; i++) {\n// \t\tbarHeight = (dataArray[i] / 255) * HEIGHT; // Adjusted scaling\n\n// \t\t// Create a gradient color for the bars\n// \t\tconst gradient = ctx.createLinearGradient(0, HEIGHT, 0, HEIGHT - barHeight);\n// \t\tgradient.addColorStop(0, '#FFC0CB'); // Light Pink at the top\n// \t\tgradient.addColorStop(1, '#D8BFD8'); // Light Purple at the bottom\n\n// \t\tctx.fillStyle = gradient;\n// \t\tctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n// \t\tx += barWidth;\n// \t    }\n// \t}\n\n    \t\n\n\n//         draw();\n//     };\n\n//     return (\n//         <div className=\"audio-demo-container\">\n//             <img src=\"/qsic-logo.png\" alt=\"Qsic Logo\" className=\"qsic-logo\" />\n//             <div className=\"play-button\" onClick={playAudio}>\n//             </div>\n//             <canvas ref={canvasRef} className=\"audio-visualizer\"></canvas>\n//             <div className=\"cta\">\n//                 Interested in Lucy? <a href=\"/contact_link\" className=\"cta-link\">Contact us for a demo</a>\n//             </div>\n//             <audio ref={audioRef} src=\"/lucy-demo.wav\"></audio>\n//         </div>\n//     );\n// }\n\n// export default AudioDemo;\nimport React, { useRef } from 'react';\nimport './AudioDemo.css';\n\nfunction AudioDemo() {\n    const audioRef = useRef(null);\n    const canvasRef = useRef(null);\n    let audioContext, analyser, dataArray, bufferLength, source;\n\n    const playAudio = () => {\n        if (audioRef.current) {\n            if (!audioContext) {\n                visualizeAudio();\n            }\n            audioRef.current.play();\n        }\n    };\n\n    const visualizeAudio = () => {\n        audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        analyser = audioContext.createAnalyser();\n        if (!source) { // Check if source is already defined\n            source = audioContext.createMediaElementSource(audioRef.current);\n            source.connect(analyser);\n            analyser.connect(audioContext.destination);\n        }\n        analyser.fftSize = 256;\n        bufferLength = analyser.frequencyBinCount;\n        dataArray = new Uint8Array(bufferLength);\n\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        const WIDTH = canvas.width;\n        const HEIGHT = canvas.height;\n\n        // Adjust canvas resolution for sharper visuals\n        const devicePixelRatio = window.devicePixelRatio || 1;\n        canvas.width = WIDTH * devicePixelRatio;\n        canvas.height = HEIGHT * devicePixelRatio;\n        ctx.scale(devicePixelRatio, devicePixelRatio);\n\n        function draw() {\n            requestAnimationFrame(draw);\n            analyser.getByteFrequencyData(dataArray);\n            ctx.clearRect(0, 0, WIDTH, HEIGHT); // Clear the canvas for each frame\n            const barWidth = WIDTH / bufferLength;\n            let barHeight;\n            let x = 0;\n\n            ctx.lineCap = 'round'; // Make bars have rounded ends\n\n            for (let i = 0; i < bufferLength; i++) {\n                barHeight = (dataArray[i] / 255) * HEIGHT; // Adjusted scaling\n\n                ctx.fillStyle = 'white'; // Set bars to white\n                ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n                x += barWidth;\n            }\n        }\n\n        draw();\n    };\n\n    return (\n        <div className=\"audio-demo-container\">\n            <img src=\"/qsic-logo.png\" alt=\"Qsic Logo\" className=\"qsic-logo\" />\n            <div className=\"play-button\" onClick={playAudio}>\n            </div>\n            <canvas ref={canvasRef} className=\"audio-visualizer\"></canvas>\n            <div className=\"cta\">\n                Interested in Lucy? <a href=\"/contact_link\" className=\"cta-link\">Contact us for a demo</a>\n            </div>\n            <audio ref={audioRef} src=\"/lucy-demo.wav\"></audio>\n        </div>\n    );\n}\n\nexport default AudioDemo;\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGL,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMM,SAAS,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC9B,IAAIO,YAAY,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,YAAY,EAAEC,MAAM;EAE3D,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACpB,IAAIP,QAAQ,CAACQ,OAAO,EAAE;MAClB,IAAI,CAACN,YAAY,EAAE;QACfO,cAAc,CAAC,CAAC;MACpB;MACAT,QAAQ,CAACQ,OAAO,CAACE,IAAI,CAAC,CAAC;IAC3B;EACJ,CAAC;EAED,MAAMD,cAAc,GAAGA,CAAA,KAAM;IACzBP,YAAY,GAAG,KAAKS,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}